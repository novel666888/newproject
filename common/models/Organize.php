<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "{{%organize}}".
 * 组织架构表  处理公司组织架构
 * @property int $id 主键ID
 * @property string $organize_name 组织架构名称
 * @property int|null $top_one_id 一级组织架构id
 * @property string|null $top_one_name 一级组织架构名称
 * @property int|null $top_two_id 二级组织架构id
 * @property string|null $top_two_name 二级组织架构名称
 * @property int|null $top_three_id 三级组织架构id
 * @property string|null $top_three_name 三级组织架构名称
 * @property int|null $top_four_id 四级组织架构id
 * @property string|null $top_four_name 四级组织架构名称
 * @property int|null $level 所属组织架构级别
 * @property int $pid 上级ID
 * @property string|null $create_time 创建时间
 * @property string|null $update_time 修改时间
 */




class Organize extends \yii\db\ActiveRecord
{

    public $hierarchy=[
        1=>'one',
        2=>'two',
        3=>'three',
        4=>'four',
        5=>'five'
    ];

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%organize}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['organize_name','pid'], 'required'],  //非空
            //[['organize_name'], 'unique'], //唯一
            [['top_one_id', 'top_two_id', 'top_three_id','soft', 'top_four_id', 'level', 'pid'], 'number'], // 必须是数字  可以是正 负数
            [['top_one_id', 'top_two_id', 'top_three_id', 'top_four_id'], 'default','value'=>-1],
            [['level'], 'default','value'=>1],
            [['create_time', 'update_time'], 'safe'],
            [['organize_name', 'top_one_name', 'top_two_name', 'top_three_name', 'top_four_name'], 'string', 'max' => 50],
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $nowData = $this->attributes; //获取当前插入信息
        if($insert){
            if($nowData['pid']==0){ //如果是是顶级架构 需要把自己一级的信息放入到所属字段中
                $param['top_one_id'] = $nowData['id'];
                $param['top_one_name'] = $nowData['organize_name'];
                Organize::updateAll($param, ['id'=> $nowData['id']]);
            }else{  // 如果不是一级，需要把上层所有架构放到所属字段中
                $parentData = Organize::findOne($nowData['pid'])->toArray();
                $selfData = Organize::findOne($nowData['id']);
                $selfData -> level = $parentData['level']+1;
                for($i=1;$i<6;$i++){
                    $keyId="top_{$this->hierarchy[$i]}_id";
                    $keyName="top_{$this->hierarchy[$i]}_name";
                    if($parentData["top_{$this->hierarchy[$i]}_id"] != -1){
                        $selfData -> $keyId    =  $parentData[$keyId];
                        $selfData -> $keyName  =  $parentData[$keyName];
                    }elseif($i == $selfData->level && $i < 6){
                        $selfData -> $keyId    =  $nowData['id'];
                        $selfData -> $keyName  =  $nowData['organize_name'];
                    }
                    $selfData->save();
                }
            }
        }else{  //更新操作 ，当修改之后重新填充自己 及下级的组织架构
            $this->saveUserOrganize($nowData);
            $key = "top_".$this->hierarchy[$nowData['level']]."_id";
            $sonData =  Organize::find()->where([
                'and',
                [$key => $nowData['id']],
                ['!=','id',$nowData['id']]
            ])->orderBy(['level'=>SORT_ASC])
                ->asArray()->all();
            if(!empty($sonData)){
                foreach($sonData as $k=>$v){
                     $this->saveSonHierarchy($v);
                }
            }
        }
    }

     public function saveUserOrganize($data){
         $key = "top_".$this->hierarchy[$data['level']]."_name";
         self::updateAll([$key=>$data['organize_name']],['id'=>$data['id']]);
         $data[$key] = $data['organize_name'];
         $organizeName = $data['top_one_name'];
         if($data['top_two_id'] != -1){
             $organizeName .= "-".$data['top_two_name'];
         }
         if($data['top_three_id'] != -1){
             $organizeName .= "-".$data['top_three_name'];
         }
         if($data['top_four_id'] != -1){
             $organizeName .= "-".$data['top_four_name'];
         }
         if($data['top_five_id'] != -1){
             $organizeName .= "-".$data['top_five_name'];
         }
         $param=[];
         $param['organize_name'] = $organizeName;
         if($data['top_two_id'] == -1){
             $param['parent_organize_id'] = $data['top_one_id'];
             $param['parent_organize_name'] = $data['top_one_name'];
         }else{
             $param['parent_organize_id'] = $data['top_two_id'];
             $param['parent_organize_name'] = $data['top_two_name'];
         }
         $userData = Users::updateAll($param,['organize_id'=>$data['id']]);
         return $userData;
     }
    /**
     * 修改自生组织架构
     */
    public function saveSonHierarchy($nowData){
        $parentData = Organize::findOne($nowData['pid'])->toArray();

        $param=[];
        $param['id']=$nowData['id'];
        $param['level'] = $parentData['level']+1;
        for($i=1;$i<6;$i++){
            $keyId="top_{$this->hierarchy[$i]}_id";
            $keyName="top_{$this->hierarchy[$i]}_name";
            $param[$keyId]=-1;
            $param[$keyName]='';
            if($parentData["top_{$this->hierarchy[$i]}_id"] != -1){
                $param[$keyId]    =  $parentData[$keyId];
                $param[$keyName]  =  $parentData[$keyName];
            }elseif($i == $param['level']){
                $param[$keyId]     =  $nowData['id'];
                $param[$keyName]   =  $nowData['organize_name'];
                $param['organize_name']   =  $nowData['organize_name'];
            }
        }
        $this->saveUserOrganize($param);
        return Organize::updateAll($param, ['id'=> $param['id']]);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => '主键ID',
            'organize_name' => '组织架构名称',
            'top_one_id' => '一级组织架构ID',
            'top_one_name' => '一级组织架构名称',
            'top_two_id' => '二级组织架构ID',
            'top_two_name' => '二级组织架构名称',
            'top_three_id' => '三级组织架构ID',
            'top_three_name' => '三级组织架构名称',
            'top_four_id' => '四级组织架构ID',
            'top_four_name' => '四级组织架构名称',
            'level' => '当前数据所属组织架构级别',
            'pid' => '上级组织架构ID',
            'create_time' => '创建时间',
            'update_time' => '修改时间',
            'soft'=>"排序"
        ];
    }

    /**
     * 获取所有组织架构数据
     * @return array|int
     */
    public function getOrganizeData(){
         $data = self::find()->orderBy('id',SORT_ASC)->asArray()->all();
         //查询每个组织架构下面绑定了多少员工
         foreach($data as $k=>$v){
            $sons=$this->getOrganizeNameById($v['id'],2);
            if(isset($sons['organizeIds'][0]) && !empty($sons['organizeIds'][0])){
                $data[$k]['userCnt']=(new Users())->getUserInfoByOrganizeId($sons['organizeIds'][0],2);
            }else{
                $data[$k]['userCnt']=0;
            }
         }
         $data = self::generateTree($data);
         return $data;
    }

    /**
     * 获取某个组织架构下所有的人
     */
    public function getUserIdByOrganizeId($organizeId){
        $data =self::findOne($organizeId);
        if(!$data){
            return [];
        }
        $key = "top_".$this->hierarchy[$data->level]."_id";
        $where = [
            $key=>$organizeId
        ];
        $sonData = self::find()
            ->select("id")
            ->where($where)
            ->asArray()
            ->all();
        if(empty($sonData)){
            return [];
        }
        $organizeIds = array_column($sonData,"id");
        $userData = Users::find()
            ->select("id")
            ->where(['in','organize_id',$organizeIds])
            ->asArray()
            ->all();
        if(empty($userData)){
            return [];
        }
        return array_column($userData,"id");
    }

    /**
     * 获取组织架构树结构
     * @param $id
     * @param $data
     * @return int
     */
   static function generateTree($array){
        //第一步 构造数据
        $items = array();
        foreach($array as $value){
            $items[$value['id']] = $value;
        }
        foreach($items as $k => $v){
            if(!isset($v['action_type'])){
                $v['action_type']=-1;
            }
            if(!isset($v['level'])){
                $v['level']=-1;
            }
            if($v['action_type']==1 || $v['level']==1){
               $items[$k]['index']=$v['id'];
            }else{
               $items[$k]['index']=$v['pid']."-".$v['soft'];
            }
        }
        //第二步 遍历数据 生成树状结构
        $tree = array();
        foreach($items as $key => $item){
            if(isset($items[$item['pid']])){
                $items[$item['pid']]['son'][] = &$items[$key];
            }else{
                $tree[] = &$items[$key];
            }
        }
        $tree = self::order($tree);
        return $tree;
    }

    public static function order($arr){
       $count = count($arr);
        $temp = 0;
        for($i=0; $i<$count-1; $i++){
            //内层控制每轮比较次数
            for($j=0; $j< $count-1-$i; $j++){
                if($arr[$j]['soft'] > $arr[$j+1]['soft']){
                    $temp  = $arr[$j];
                    $arr[$j]  = $arr[$j+1];
                    $arr[$j+1] = $temp;
                }
            }
        }
        return $arr;
     }
    /**
     * 删除组织架构
     */
    public function delOrganizeForId($id){
            $data = self::findOne(['id'=>$id])->toArray();
            $key = "top_".$this->hierarchy[$data['level']]."_id";
            $cnt = self::find()->where([$key=>$data['id']])->count();
            if($cnt>1){
                return 1;//当前架构下面有子架构
            }
            $cnt = Users::find()->where(['organize_id'=>$id,'worked'=>1])->count();
            if($cnt>0){
                return  2;//当前架构下面存在绑定的员工
            }
            if(self::findOne($id)->delete()){
                return 0;
            }else{
                return -1;
            }
    }

    /**
     * 获取组织架构架构名称
     * @param $id
     * @param $type 0 只返回名称 1 返回所有上级架构的ID及名称（带本身架构） 2 返回所有下级架构的ID及名称（带本身架构）
     * @return mixed|string
     */
    public function getOrganizeNameById($id,$type=0){

        $data =  self::find()->where(['id'=>$id])->asArray()->one();
        if(empty($data)){
            return "组织架构不存在";
        }

        if($type==-1){//所属组织架构id
            if($data['level']>2){
                return [
                    'parent_organize_id'=>$data['top_two_id'] > 0 ? $data['top_two_id']:$data['top_one_id'],
                    'parent_organize_name'=>$data['top_two_id'] > 0 ? $data['top_two_name']:$data['top_one_name'],
                ];
            }else{
                return [
                    'parent_organize_id'=>$data['top_one_id'],
                    'parent_organize_name'=>$data['top_one_name'],
                ];
            }
        }

        if($type==0){//所属组织架构id
            $organizeNam="小纸条";
            for($i=2;$i<=5;$i++){
                $key = "top_".$this->hierarchy[$i]."_name";
                if(!empty($data[$key])){
                    $organizeNam=$organizeNam."-".$data[$key];
                }
            }
            return $organizeNam;
        }

        $returnData=[];
        if($type==1){
            for($i=1;$i<=$data['level'];$i++){
                $key = "top_".$this->hierarchy[$i]."_id";
                $keyName = "top_".$this->hierarchy[$i]."_name";
                $returnData["organizeIds"][]=$data[$key];
                $returnData["organizeNames"][]=$data[$keyName];
            }
            $returnData["level"]=$data['level'];
        }elseif($type==2){
            $key = "top_".$this->hierarchy[$data['level']]."_id";
            $sonData = self::find()->select("id,organize_name")->where([$key=>$data['id']])->asArray()->all();
            $returnData["organizeIds"][]=array_column($sonData,'id');
            $returnData["organizeNames"][]=array_column($sonData,'organize_name');
            $returnData["level"]=$data['level'];
        }
        return $returnData;
    }

    /**
     * 查询出某个组下面的组别
     */
    public function getOrganizeInfoByOrganizeId($organizeId){
        $data = self::find()
            ->select("top_one_id,top_one_name,top_two_id,top_two_name,top_three_id,top_three_name,top_four_id,top_four_name,top_five_id,top_five_name,level")
            ->where(['id'=>$organizeId])
            ->asArray()->one();
        return $data;
    }

}
